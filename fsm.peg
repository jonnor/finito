/* Finito - Finite State Machines 
 * Copyright (c) 2014 Jon Nordby <jononor@gmail.com>
 * Finito may be freely distributed under the MIT license
 */

// Grammar for PEG.js, https://github.com/dmajda/pegjs
{
  var parser = this;
  //parser.debug = true;  

  parser.machine = {
    name: "",
    initial: {state: ""},
    exit: {state: ""},
    states: {},
    transitions: []
  }

  parser.getResult = function() {
    return parser.machine;
  }

  parser.state = function(name, params) {
    if (parser.debug) console.log('state', name, params, parser.machine.states);
    var states = parser.machine.states;
    if (!states[name]) {
        states[name] = {};
    }
    if (params && Object.keys(params).length) {
        states[name] = params;
    }
  }

  parser.addTransition = function(from, to, when) {
    if (parser.debug) console.log('addTransition', from, to, when);
    var t = {from: from, to: to, when: when};
    parser.machine.transitions.push(t);
  }

  parser.setAttribute = function(name, val) {
    if (parser.debug) console.log('setAttribute', name, val);
    if (name == "initial") {
      parser.machine.initial.state = val;
    } else if (name == "exit") {
      parser.machine.exit.state = val;
    } else {
      parser.machine[name] = val;
    }
    if (parser.debug) console.log('setattribute done', parser.machine);
  }

}


// Common defs
start
  = (line)*
  { return parser.getResult();  }
_
  = (" "*)?
__
  = " "+

newline
  = [\n\r\u2028\u2029]
  
anychar
  = [^\n\r\u2028\u2029]

notspecial
  = [a-zA-Z*0-9_\-.]

comment
  = _ "#" (anychar)*

line
  = _ transition _ newline
  / _ attribute _ newline
  / _ newstate _ newline
  / anychar* newline

string
  = "\"" anychar* "\""

name
  = chars:notspecial+
  {Â return chars.join(''); }

// Attributes
attribute
  = name:name _ "=" _ val:name
  { return parser.setAttribute(name,val); }

// State
funcvalue "function"
  = chars: notspecial+
  { return chars.join(''); }

functype
  = "enter"

var
  = type: functype "=" value: funcvalue
  { return [type.join(''), value.join('')] }

// handle optional delimeter and whitespace
nvar
 = v: var ","* _*
 { return v }

// FIXME: generalize to more than enter
stateparams
  = "{" "enter=" val: funcvalue "}"
  { return { enter: val }; }

//  = _* "{" vars: nvar* "}"
//  { var ret = {}; vars.forEach(function(i) { ret[i[0]] = i[1] } ); return ret;  }

stateref
  = state:name

newstate
  = state:stateref params:stateparams
  { parser.state(state,params); return state; }

// FIXME: allow inline creation of new states
// Transitions
transition
  = from:name _ "[" when:name "]=>" _ to:name
  { return parser.addTransition(from,to,when); }









